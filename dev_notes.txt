

Adjacent cube masking
udfblr = [0,0,0,0,0,0]

segments =
tl, tr
ml, mr
bl, br
sl, sr
c

u -> ml + mr + (tl + tr)
d -> bl + br
f -> tr + sr
b -> ml + c + (sl + bl)
l -> tl + sl
r -> mr + c + (sr + br)

in theory 2^6 = 32 possible cubes? How many are distinct and meaningful?

blockers
b + r -> d (2^1 - 1 = 1)
b + u -> l (2^1 - 1 = 1)
r + u -> f (2^1 - 1 = 1)
b + r + u -> everything (2^3 - 1 = 7)



Elliptic arc drawing
Python PIL doesn't seem to use
https://en.wikipedia.org/wiki/Midpoint_circle_algorithm
Would be prettier if it did



To mix sizes:
3x+2 for new x
to replace
[
	[
		[1, 1, 1],
		[1, 1, 1],
		[1, 1, 1]
	],
	[
		[1, 1, 1],
		[1, 1, 1],
		[1, 1, 1]
	],
	[
		[1, 1, 1],
		[1, 1, 1],
		[1, 1, 1]
	]
]
with
[
	[
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	],
	[
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	],
	[
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	],
	[
		[0, 0, 0],
		[0, 0, 0],
		[1, 0, 0]
	]
]




x' = x*cos(t) - y*sin(t)
y' = x*cos(t) + y*sin(t)



ellipse in polar:
r = a*b/sqrt((a*sin(t))^2 + (b*cos(t))^2)



(x/a)^2 + (y/b)^2 = 1
 b^2 *(x*cos(t) - y*sin(t))^2 +  a^2 *(x*cos(t) + y*sin(t)) = a^2 * b^2

-a^2*b^2 + a^2*x^2*cos(t)^2 + a^2*x*y*sin(2*t) + a^2*y^2*sin(t)^2 + b^2*x^2*cos(t)^2 - b^2*x*y*sin(2*t) + b^2*y^2*sin(t)^2 = 0