

Adjacent cube masking
udfblr = [0,0,0,0,0,0]

segments =
tl, tr
ml, mr
bl, br
sl, sr
c

u -> ml + mr + (tl + tr)
d -> bl + br
f -> tr + sr
b -> ml + c + (sl + bl)
l -> tl + sl
r -> mr + c + (sr + br)

in theory 2^6 = 32 possible cubes? How many are distinct and meaningful?

blockers
b + r -> d (2^1 - 1 = 1)
b + u -> l (2^1 - 1 = 1)
r + u -> f (2^1 - 1 = 1)
b + r + u -> everything (2^3 - 1 = 7)



Elliptic arc drawing
Python PIL doesn't seem to use
https://en.wikipedia.org/wiki/Midpoint_circle_algorithm
Would be prettier if it did



To mix sizes:
3x+2 for new x
to replace
[
	[
		[1, 1, 1],
		[1, 1, 1],
		[1, 1, 1]
	],
	[
		[1, 1, 1],
		[1, 1, 1],
		[1, 1, 1]
	],
	[
		[1, 1, 1],
		[1, 1, 1],
		[1, 1, 1]
	]
]
with
[
	[
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	],
	[
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	],
	[
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	],
	[
		[0, 0, 0],
		[0, 0, 0],
		[1, 0, 0]
	]
]




x' = x*cos(t) - y*sin(t)
y' = x*cos(t) + y*sin(t)



ellipse in polar:
r = a*b/sqrt((a*sin(t))^2 + (b*cos(t))^2)


ELLIPSE ROTATION
(x/a)^2 + (y/b)^2 = 1

b^2 *(x*cos(t) - y*sin(t))^2 +  a^2 *(x*sin(t) + y*cos(t)) = a^2 * b^2

-a^2*b^2 + b^2*x^2*cos(t)^2 - 2*b^2*x*y*sin(t)*cos(t) + b^2*y^2*sin(t)^2 + a^2*x^2*sin(t)^2 + a^2*y^2*cos(t)^2 + a^2*x*y*sin(t)*cos(t) = 0

- a^2*b^2 
+ (a^2*sin(t)^2+b^2*cos(t)^2) *x^2 
+ 2*(a^2 - b^2)*sin(t)*cos(t) *x*y 
+ (a^2*cos(t)^2+b^2*sin(t)^2) *y^2 
= 0



CIRCLE SHEERING

x^2 + y^2 = r^2
x^2 + (y+s*x)^2 = r^2
-r^2 + x^2 + s^2*x^2 + 2*s*x*y + y^2 = 0
-r^2 + (1+s^2)*x^2 + 2*s*x*y + y^2 = 0


- r^2
+ (1+s^2) *x^2 
+ 2*s*x*y 
+ y^2 
= 0


therefore we have the system
a^2*b^2 = r^2
a^2*sin(t)^2+b^2*cos(t)^2 = 1+s^2
2*(a^2 - b^2)*sin(t)*cos(t) = 2*s
a^2*cos(t)^2+b^2*sin(t)^2 = 1

Now begin to solve
eq1(a) -> a = r/b
(r/b)^2*sin(t)^2+b^2*cos(t)^2 = 1+s^2
2*((r/b)^2 - b^2)*sin(t)*cos(t) = 2*s
(r/b)^2*cos(t)^2+b^2*sin(t)^2 = 1

muliply through to remove rationals
r^2*sin(t)^2+b^4*cos(t)^2 = (1+s^2)*b^2
2*(r^2 - b^4)*sin(t)*cos(t) = 2*s*b^2
r^2*cos(t)^2+b^4*sin(t)^2 = b^2

Apply pythagorean identity
(r^2-b^4)*sin(t)^2+b^4 = (1+s^2)*b^2
r^2+(b^4-r^2)*sin(t)^2 = b^2

(r^2-b^4)*sin(t)^2= (1+s^2)*b^2 - b^4
(b^4-r^2)*sin(t)^2 = b^2 - r^2

(r^2-b^4)/(b^4-r^2) = ((1+s^2)*b^2 - b^4)/(b^2 - r^2)
-1 = ((1+s^2)*b^2 - b^4)/(b^2 - r^2)
r^2 - b^2 = (1+s^2)*b^2 - b^4
b^4 -(2+s^2)*b^2 + r^2 = 0

b = sqrt((2+s^2 +- sqrt((2+s^2) - 2*r^2))/2)














ELLIPSE ROTATION
- a^2*b^2 
+ (a^2*sin(t)^2+b^2*cos(t)^2) *x^2 
+ 2*(a^2 - b^2)*sin(t)*cos(t) *x*y 
+ (a^2*cos(t)^2+b^2*sin(t)^2) *y^2 
= 0

- 1
+ ((sin(t)/b)^2+(cos(t)/a)^2) *x^2 
+ 2*((1/b)^2 - (1/a)^2)*sin(t)*cos(t) *x*y 
+ ((cos(t)/b)^2+(sin(t)/a)^2) *y^2 
= 0



CIRCLE SHEERING
- 1
+ (1+s^2)/r^2 *x^2 
+ 2*s/r^2 *x*y 
+ 1/r^2 *y^2 
= 0


therefore we have the system
(sin(t)/b)^2+(cos(t)/a)^2 = (1+s^2)/r^2
2*((1/b)^2 - (1/a)^2)*sin(t)*cos(t) = 2*s/r^2
(cos(t)/b)^2+(sin(t)/a)^2 = 1/r^2

a^2*r^2*sin(t)^2+b^2*r^2*cos(t)^2 = (1+s^2)*a^2*b^2
2*(a^2*r^2 - b^2*r^2)*sin(t)*cos(t) = 2*s*a^2*b^2
a^2*cos(t)^2+b^2*sin(t)^2 = a^2*b^2

a,b,t


4*(b^2 - r^2)*(b^2*r^2 - b^2*a^2 + r^2*a^2 - r^4) = a^2*b^4
- r^2*a^2 + (2+s^2)*a^2*b^2 - r^2*b^2 = 0

((2+s^2)*b^2 - r^2)*a^2 = r^2*b^2
a^2 = r^2*b^2 / ((2+s^2)*b^2 - r^2)


4*(b^2 - r^2)*(b^2*r^2*((2+s^2)*b^2 - r^2) - b^4*r^2 + r^4*b^2 - r^4*((2+s^2)*b^2 - r^2)) = r^2*b^6

4*(b^2 - r^2)*((1+s^2)*b^4 - (2+s^2)*r^2*b^2 + r^4) = b^6




Future 3D exploration:
https://www.reddit.com/r/godot/comments/9xttpm/2d_sprites_in_a_3d_plane/
https://github.com/godotengine/godot/issues/25980
https://docs.godotengine.org/en/3.2/classes/class_sprite3d.html
https://www.youtube.com/watch?v=LbyyjmOji0M&feature=youtu.be
https://www.youtube.com/watch?v=v5TmtUr_4B0
Look up "billboarding"

Procedural
https://www.reddit.com/r/proceduralgeneration/comments/7gfnx3/my_level_generator_functions_makes_halfdecent/
https://imgur.com/a/2XPb2


unlockable characters
-basic person
-invert colors
-ball
-emojis (egg plant)



